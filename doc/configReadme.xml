<?xml version='1.0' encoding='utf-8'?>
<configuration>
    <placeholders>
        <placeholder id="template_name">Salesforce to Salesforce User Migration</placeholder>
    </placeholders>
    <sections>
        <section id="use_case">
As a Salesforce admin I want to migrate users from one Salesforce organization to another one.

This Anypoint template serves as a foundation for the process of migrating users from one Salesfoce instance to another, being able to specify filtering criteria and desired behavior when a user already exists in the destination org. 

As implemented, this template leverages the Mule batch module.
The batch job is divided in *Process* and *On Complete* stages.
Migration process starts from fetching all the existing Users that match the filter criteria from Salesforce Org A.
The User's profile ID is mapped from SalesForce instance A to B, each profile ID from the left (source instance) will be map to the one on the right (target instance). Only the users with the same profile ID as configured source ID are migrated.
The last step of the *Process* stage groups the users and create them in Salesfoce Org B.
Finally during the *On Complete* stage the template will both output statistics data into the console and send a notification email with the results of the batch execution. 
        </section>
        <section id="considerations">

There are a couple of things you should take into account before running this template:
1. **Users cannot be deleted in SalesForce:** For now, the only thing to do regarding users removal is disabling/deactivating them, but this won't make the username available for a new user.
2. **Each user needs to be associated to a Profile:** SalesForce's profiles are what define the permissions the user will have for manipulating data and other users. Each SalesForce account has its own profiles. In this template you will find a processor labeled *assignProfileId and Username to the User* where to map your Profile Ids from the source account to the ones in the target account. Note that for the integration test to run properly, you should change the constant *DEFAULT_PROFILE_ID* in *BusinessLogicTestIT* to one that's valid in your source test organization.
3. **Working with sandboxes for the same account**: Although each sandbox should be a completely different environment, Usernames cannot be repeated in different sandboxes, i.e. if you have a user with username *bob.dylan* in *sandbox A*, you will not be able to create another user with username *bob.dylan* in *sandbox B*. If you are indeed working with Sandboxes for the same SalesForce account you will need to map the source username to a different one in the target sandbox, for this purpose, please refer to the processor labeled *assign ProfileId and Username to the User*.

        </section>
        <section id="running_on_cloudhub">

Once your app is all set and started, supposing you choose as domain name `sfdcusermigration` to trigger the use case you just need to browse to `http://sfdcusermigration.cloudhub.io/syncusers` and report will be sent to the emails configured.

        </section>
        <section id="running_on_standalone">

After this, to trigger the use case you just need to browse to the local http endpoint with the port you configured in your file. If this is, for instance, `9090` then you should browse to: `http://localhost:9090/syncusers` and this will create a CSV report and send it to the mails set.

        </section>
        <section id="application_configuration">
        
**HTTP Connector Configuration**     
+ http.port `9090`

**Starting Date e.g. 2017-12-13T03:00:59Z**
+ startingDate `2014-01-30'T'00:00:00.000'Z'`

**Batch Aggregator Configuration**
+ page.size `200`

**SalesForce Connector configuration for company A**
+ sfdc.a.username `bob.dylan@orga`
+ sfdc.a.password `DylanPassword123`
+ sfdc.a.securityToken `avsfwCUl7apQs56Xq2AKi3X`

**Profile ID from SalesForce instance A(source)**
+ sfdc.a.profile.id `00e200000015oKFAAY`

**SalesForce Connector configuration for company B**
+ sfdc.b.username `joan.baez@orgb`
+ sfdc.b.password `JoanBaez456`
+ sfdc.b.securityToken `ces56arl7apQs56XTddf34X`

**Profile ID from SalesForce instance B(target)**
+ sfdc.b.profile.id `00e20000001UzDxAAK`

**SMTP Services Configuration**
+ smtp.host `smtp.gmail.com`
+ smtp.port `587`
+ smtp.user `gmailuser`
+ smtp.password `gmailpassword`

**Mail Details**
+ mail.from `batch.user.migration%40mulesoft.com`
+ mail.to `your.username@youremaildomain.com`
+ mail.subject `Batch Job Finished Report`

        </section>
        <section id="api_calls">
        
Salesforce imposes limits on the number of API Calls that can be made. Therefore calculating this amount may be an important factor to consider. The template calls to the API can be calculated using the formula:

***1 + X + X / ${page.size}***

Being ***X*** the number of Users to be synchronized on each run. 

The division by ***${page.size}*** is because, by default, Users are gathered in groups of ${page.size} for each Upsert API Call in the commit step.

For instance if 10 records are fetched from origin instance, then 12 api calls will be made (1 + 10 + 1).

        </section>
        <section id="default_endpoints_xml">
        
This file provides the inbound and outbound sides of your integration app.
This template has only an [HTTP Inbound Endpoint](http://www.mulesoft.org/documentation/display/current/HTTP+Endpoint+Reference) as the way to trigger the use case.

$H$H#  Inbound Flow
**HTTP Inbound Endpoint** - Start Report Generation
+ `${http.port}` is set as a property to be defined either on a property file or in CloudHub environment variables.
+ The path configured by default is `syncusers` and you are free to change for the one you prefer.
+ The host name for all endpoints in your CloudHub configuration should be defined as `localhost`. CloudHub will then route requests from your application domain URL to the endpoint.
+ The endpoint is configured as a *request-response* since as a result of calling it the response will be the total of Users migrated and filtered by the criteria specified.

        </section>
        <section id="default_business_logic_xml">
        
Functional aspect of the template is implemented on this XML, directed by one flow responsible of executing the logic.
For the purpose of this particular Template the *mainFlow* uses a batch job, which handles all the logic of it.

        </section>
    </sections>
</configuration>